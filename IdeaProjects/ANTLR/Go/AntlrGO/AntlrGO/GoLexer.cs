//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Go.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class GoLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		TypeName=10, PrintLn=11, OpenParen=12, CloseParen=13, Minus=14, ComplexLitteral=15, 
		IntegerLiteral=16, StringLiteral=17, Point=18, FloatLitteral=19, Plus=20, 
		Multiply=21, Modulo=22, Bitwiseand=23, Palochka=24, LessThan=25, LessOrEqual=26, 
		Equals=27, GreaterOrEqual=28, GreaterThan=29, NotEquals=30, Id=31, Letter=32, 
		Digit=33, VosklichatelniyZnak=34, Prisvaivanie=35, Kovicka=36, Import=37, 
		I=38, Whitespace=39, NewLine=40;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"TypeName", "PrintLn", "OpenParen", "CloseParen", "Minus", "ComplexLitteral", 
		"IntegerLiteral", "StringLiteral", "Point", "FloatLitteral", "Plus", "Multiply", 
		"Modulo", "Bitwiseand", "Palochka", "LessThan", "LessOrEqual", "Equals", 
		"GreaterOrEqual", "GreaterThan", "NotEquals", "Id", "Letter", "Digit", 
		"VosklichatelniyZnak", "Prisvaivanie", "Kovicka", "Import", "I", "Whitespace", 
		"NewLine"
	};


	public GoLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "':='", "'return'", "','", "'type'", "'struct'", "'{'", "'}'", "'func'", 
		"':'", null, "'fmt.Println'", "'('", "')'", "'-'", null, null, null, "'.'", 
		null, "'+'", "'*'", "'%'", "'&'", "'|'", "'<'", "'<='", "'=='", "'>='", 
		"'>'", "'!='", null, null, null, "'!'", "'='", "'\"'", "'import'", "'i'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "TypeName", 
		"PrintLn", "OpenParen", "CloseParen", "Minus", "ComplexLitteral", "IntegerLiteral", 
		"StringLiteral", "Point", "FloatLitteral", "Plus", "Multiply", "Modulo", 
		"Bitwiseand", "Palochka", "LessThan", "LessOrEqual", "Equals", "GreaterOrEqual", 
		"GreaterThan", "NotEquals", "Id", "Letter", "Digit", "VosklichatelniyZnak", 
		"Prisvaivanie", "Kovicka", "Import", "I", "Whitespace", "NewLine"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Go.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2*\x113");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3");
		sb.Append("\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\v\x5\v\x8C\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f");
		sb.Append("\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF");
		sb.Append("\x3\x10\x3\x10\x5\x10\xA2\n\x10\x3\x10\x3\x10\x5\x10\xA6\n\x10");
		sb.Append("\x3\x10\x3\x10\x5\x10\xAA\n\x10\x3\x10\x3\x10\x3\x11\x5\x11");
		sb.Append("\xAF\n\x11\x3\x11\x6\x11\xB2\n\x11\r\x11\xE\x11\xB3\x3\x12\x3");
		sb.Append("\x12\a\x12\xB8\n\x12\f\x12\xE\x12\xBB\v\x12\x3\x12\x3\x12\x3");
		sb.Append("\x13\x3\x13\x3\x14\x5\x14\xC2\n\x14\x3\x14\x6\x14\xC5\n\x14");
		sb.Append("\r\x14\xE\x14\xC6\x3\x14\x3\x14\x6\x14\xCB\n\x14\r\x14\xE\x14");
		sb.Append("\xCC\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18");
		sb.Append("\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3");
		sb.Append("\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F");
		sb.Append("\x3\x1F\x3 \x3 \x3 \a \xEC\n \f \xE \xEF\v \x3!\x3!\x3\"\x3");
		sb.Append("\"\x3#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3\'");
		sb.Append("\x3\'\x3(\x6(\x105\n(\r(\xE(\x106\x3(\x3(\x3)\x3)\x3)\x6)\x10E");
		sb.Append("\n)\r)\xE)\x10F\x3)\x3)\x2\x2*\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b");
		sb.Append("\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11");
		sb.Append("!\x12#\x13%\x14\'\x15)\x16+\x17-\x18/\x19\x31\x1A\x33\x1B\x35");
		sb.Append("\x1C\x37\x1D\x39\x1E;\x1F= ?!\x41\"\x43#\x45$G%I&K\'M(O)Q*\x3");
		sb.Append("\x2\a\x3\x2$$\x5\x2\x43\\\x61\x61\x63|\x3\x2\x32;\x5\x2\v\v");
		sb.Append("\"\"))\x4\x2\f\f\xF\xF\x123\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2");
		sb.Append("\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r");
		sb.Append("\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3");
		sb.Append("\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2");
		sb.Append("\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2");
		sb.Append("\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3");
		sb.Append("\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2");
		sb.Append("/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3");
		sb.Append("\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2");
		sb.Append("\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43");
		sb.Append("\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2");
		sb.Append("\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2");
		sb.Append("\x2\x2\x3S\x3\x2\x2\x2\x5V\x3\x2\x2\x2\a]\x3\x2\x2\x2\t_\x3");
		sb.Append("\x2\x2\x2\v\x64\x3\x2\x2\x2\rk\x3\x2\x2\x2\xFm\x3\x2\x2\x2\x11");
		sb.Append("o\x3\x2\x2\x2\x13t\x3\x2\x2\x2\x15\x8B\x3\x2\x2\x2\x17\x8D\x3");
		sb.Append("\x2\x2\x2\x19\x99\x3\x2\x2\x2\x1B\x9B\x3\x2\x2\x2\x1D\x9D\x3");
		sb.Append("\x2\x2\x2\x1F\xA5\x3\x2\x2\x2!\xAE\x3\x2\x2\x2#\xB5\x3\x2\x2");
		sb.Append("\x2%\xBE\x3\x2\x2\x2\'\xC1\x3\x2\x2\x2)\xCE\x3\x2\x2\x2+\xD0");
		sb.Append("\x3\x2\x2\x2-\xD2\x3\x2\x2\x2/\xD4\x3\x2\x2\x2\x31\xD6\x3\x2");
		sb.Append("\x2\x2\x33\xD8\x3\x2\x2\x2\x35\xDA\x3\x2\x2\x2\x37\xDD\x3\x2");
		sb.Append("\x2\x2\x39\xE0\x3\x2\x2\x2;\xE3\x3\x2\x2\x2=\xE5\x3\x2\x2\x2");
		sb.Append("?\xE8\x3\x2\x2\x2\x41\xF0\x3\x2\x2\x2\x43\xF2\x3\x2\x2\x2\x45");
		sb.Append("\xF4\x3\x2\x2\x2G\xF6\x3\x2\x2\x2I\xF8\x3\x2\x2\x2K\xFA\x3\x2");
		sb.Append("\x2\x2M\x101\x3\x2\x2\x2O\x104\x3\x2\x2\x2Q\x10D\x3\x2\x2\x2");
		sb.Append("ST\a<\x2\x2TU\a?\x2\x2U\x4\x3\x2\x2\x2VW\at\x2\x2WX\ag\x2\x2");
		sb.Append("XY\av\x2\x2YZ\aw\x2\x2Z[\at\x2\x2[\\\ap\x2\x2\\\x6\x3\x2\x2");
		sb.Append("\x2]^\a.\x2\x2^\b\x3\x2\x2\x2_`\av\x2\x2`\x61\a{\x2\x2\x61\x62");
		sb.Append("\ar\x2\x2\x62\x63\ag\x2\x2\x63\n\x3\x2\x2\x2\x64\x65\au\x2\x2");
		sb.Append("\x65\x66\av\x2\x2\x66g\at\x2\x2gh\aw\x2\x2hi\a\x65\x2\x2ij\a");
		sb.Append("v\x2\x2j\f\x3\x2\x2\x2kl\a}\x2\x2l\xE\x3\x2\x2\x2mn\a\x7F\x2");
		sb.Append("\x2n\x10\x3\x2\x2\x2op\ah\x2\x2pq\aw\x2\x2qr\ap\x2\x2rs\a\x65");
		sb.Append("\x2\x2s\x12\x3\x2\x2\x2tu\a<\x2\x2u\x14\x3\x2\x2\x2vw\ak\x2");
		sb.Append("\x2wx\ap\x2\x2x\x8C\av\x2\x2yz\ah\x2\x2z{\an\x2\x2{|\aq\x2\x2");
		sb.Append("|}\a\x63\x2\x2}\x8C\av\x2\x2~\x7F\a\x65\x2\x2\x7F\x80\aq\x2");
		sb.Append("\x2\x80\x81\ao\x2\x2\x81\x82\ar\x2\x2\x82\x83\an\x2\x2\x83\x84");
		sb.Append("\ag\x2\x2\x84\x8C\az\x2\x2\x85\x86\au\x2\x2\x86\x87\av\x2\x2");
		sb.Append("\x87\x88\at\x2\x2\x88\x89\ak\x2\x2\x89\x8A\ap\x2\x2\x8A\x8C");
		sb.Append("\ai\x2\x2\x8Bv\x3\x2\x2\x2\x8By\x3\x2\x2\x2\x8B~\x3\x2\x2\x2");
		sb.Append("\x8B\x85\x3\x2\x2\x2\x8C\x16\x3\x2\x2\x2\x8D\x8E\ah\x2\x2\x8E");
		sb.Append("\x8F\ao\x2\x2\x8F\x90\av\x2\x2\x90\x91\a\x30\x2\x2\x91\x92\a");
		sb.Append("R\x2\x2\x92\x93\at\x2\x2\x93\x94\ak\x2\x2\x94\x95\ap\x2\x2\x95");
		sb.Append("\x96\av\x2\x2\x96\x97\an\x2\x2\x97\x98\ap\x2\x2\x98\x18\x3\x2");
		sb.Append("\x2\x2\x99\x9A\a*\x2\x2\x9A\x1A\x3\x2\x2\x2\x9B\x9C\a+\x2\x2");
		sb.Append("\x9C\x1C\x3\x2\x2\x2\x9D\x9E\a/\x2\x2\x9E\x1E\x3\x2\x2\x2\x9F");
		sb.Append("\xA2\x5!\x11\x2\xA0\xA2\x5\'\x14\x2\xA1\x9F\x3\x2\x2\x2\xA1");
		sb.Append("\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA4\a-\x2\x2\xA4\xA6");
		sb.Append("\x3\x2\x2\x2\xA5\xA1\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA9");
		sb.Append("\x3\x2\x2\x2\xA7\xAA\x5!\x11\x2\xA8\xAA\x5\'\x14\x2\xA9\xA7");
		sb.Append("\x3\x2\x2\x2\xA9\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAC");
		sb.Append("\ak\x2\x2\xAC \x3\x2\x2\x2\xAD\xAF\x5\x1D\xF\x2\xAE\xAD\x3\x2");
		sb.Append("\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB1\x3\x2\x2\x2\xB0\xB2\x5\x43");
		sb.Append("\"\x2\xB1\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB1\x3\x2");
		sb.Append("\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\"\x3\x2\x2\x2\xB5\xB9\a$\x2\x2");
		sb.Append("\xB6\xB8\n\x2\x2\x2\xB7\xB6\x3\x2\x2\x2\xB8\xBB\x3\x2\x2\x2");
		sb.Append("\xB9\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBC\x3\x2\x2\x2");
		sb.Append("\xBB\xB9\x3\x2\x2\x2\xBC\xBD\a$\x2\x2\xBD$\x3\x2\x2\x2\xBE\xBF");
		sb.Append("\a\x30\x2\x2\xBF&\x3\x2\x2\x2\xC0\xC2\x5\x1D\xF\x2\xC1\xC0\x3");
		sb.Append("\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC4\x3\x2\x2\x2\xC3\xC5\x5");
		sb.Append("\x43\"\x2\xC4\xC3\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC4\x3");
		sb.Append("\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xCA\a");
		sb.Append("\x30\x2\x2\xC9\xCB\x5\x43\"\x2\xCA\xC9\x3\x2\x2\x2\xCB\xCC\x3");
		sb.Append("\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD(\x3\x2");
		sb.Append("\x2\x2\xCE\xCF\a-\x2\x2\xCF*\x3\x2\x2\x2\xD0\xD1\a,\x2\x2\xD1");
		sb.Append(",\x3\x2\x2\x2\xD2\xD3\a\'\x2\x2\xD3.\x3\x2\x2\x2\xD4\xD5\a(");
		sb.Append("\x2\x2\xD5\x30\x3\x2\x2\x2\xD6\xD7\a~\x2\x2\xD7\x32\x3\x2\x2");
		sb.Append("\x2\xD8\xD9\a>\x2\x2\xD9\x34\x3\x2\x2\x2\xDA\xDB\a>\x2\x2\xDB");
		sb.Append("\xDC\a?\x2\x2\xDC\x36\x3\x2\x2\x2\xDD\xDE\a?\x2\x2\xDE\xDF\a");
		sb.Append("?\x2\x2\xDF\x38\x3\x2\x2\x2\xE0\xE1\a@\x2\x2\xE1\xE2\a?\x2\x2");
		sb.Append("\xE2:\x3\x2\x2\x2\xE3\xE4\a@\x2\x2\xE4<\x3\x2\x2\x2\xE5\xE6");
		sb.Append("\a#\x2\x2\xE6\xE7\a?\x2\x2\xE7>\x3\x2\x2\x2\xE8\xED\x5\x41!");
		sb.Append("\x2\xE9\xEC\x5\x41!\x2\xEA\xEC\x5\x43\"\x2\xEB\xE9\x3\x2\x2");
		sb.Append("\x2\xEB\xEA\x3\x2\x2\x2\xEC\xEF\x3\x2\x2\x2\xED\xEB\x3\x2\x2");
		sb.Append("\x2\xED\xEE\x3\x2\x2\x2\xEE@\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2");
		sb.Append("\xF0\xF1\t\x3\x2\x2\xF1\x42\x3\x2\x2\x2\xF2\xF3\t\x4\x2\x2\xF3");
		sb.Append("\x44\x3\x2\x2\x2\xF4\xF5\a#\x2\x2\xF5\x46\x3\x2\x2\x2\xF6\xF7");
		sb.Append("\a?\x2\x2\xF7H\x3\x2\x2\x2\xF8\xF9\a$\x2\x2\xF9J\x3\x2\x2\x2");
		sb.Append("\xFA\xFB\ak\x2\x2\xFB\xFC\ao\x2\x2\xFC\xFD\ar\x2\x2\xFD\xFE");
		sb.Append("\aq\x2\x2\xFE\xFF\at\x2\x2\xFF\x100\av\x2\x2\x100L\x3\x2\x2");
		sb.Append("\x2\x101\x102\ak\x2\x2\x102N\x3\x2\x2\x2\x103\x105\t\x5\x2\x2");
		sb.Append("\x104\x103\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106\x104\x3\x2");
		sb.Append("\x2\x2\x106\x107\x3\x2\x2\x2\x107\x108\x3\x2\x2\x2\x108\x109");
		sb.Append("\b(\x2\x2\x109P\x3\x2\x2\x2\x10A\x10E\t\x6\x2\x2\x10B\x10C\a");
		sb.Append("\xF\x2\x2\x10C\x10E\a\f\x2\x2\x10D\x10A\x3\x2\x2\x2\x10D\x10B");
		sb.Append("\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F");
		sb.Append("\x110\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111\x112\b)\x2\x2\x112");
		sb.Append("R\x3\x2\x2\x2\x12\x2\x8B\xA1\xA5\xA9\xAE\xB3\xB9\xC1\xC6\xCC");
		sb.Append("\xEB\xED\x106\x10D\x10F\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
