//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Go.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class GoParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		TypeName=10, PrintLn=11, OpenParen=12, CloseParen=13, Minus=14, ComplexLitteral=15, 
		IntegerLiteral=16, StringLiteral=17, Point=18, FloatLitteral=19, Plus=20, 
		Multiply=21, Modulo=22, Bitwiseand=23, Palochka=24, LessThan=25, LessOrEqual=26, 
		Equals=27, GreaterOrEqual=28, GreaterThan=29, NotEquals=30, Id=31, Letter=32, 
		Digit=33, VosklichatelniyZnak=34, Prisvaivanie=35, Kovicka=36, Import=37, 
		I=38, Whitespace=39, NewLine=40;
	public const int
		RULE_file = 0, RULE_statement = 1, RULE_importStatement = 2, RULE_shortDeclarationStatement = 3, 
		RULE_returnStatement = 4, RULE_printlnStatement = 5, RULE_typeDeclaration = 6, 
		RULE_varDeclaration = 7, RULE_methodDeclaration = 8, RULE_primaryExpression = 9, 
		RULE_functionCall = 10, RULE_objectConstuctor = 11, RULE_keyWordParametr = 12, 
		RULE_structureMemberExpression = 13, RULE_unaryExpression = 14, RULE_multiplicativeExpression = 15, 
		RULE_additiveExpression = 16, RULE_comparisonExpression = 17, RULE_assighmentExpression = 18, 
		RULE_expression = 19;
	public static readonly string[] ruleNames = {
		"file", "statement", "importStatement", "shortDeclarationStatement", "returnStatement", 
		"printlnStatement", "typeDeclaration", "varDeclaration", "methodDeclaration", 
		"primaryExpression", "functionCall", "objectConstuctor", "keyWordParametr", 
		"structureMemberExpression", "unaryExpression", "multiplicativeExpression", 
		"additiveExpression", "comparisonExpression", "assighmentExpression", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "':='", "'return'", "','", "'type'", "'struct'", "'{'", "'}'", "'func'", 
		"':'", null, "'fmt.Println'", "'('", "')'", "'-'", null, null, null, "'.'", 
		null, "'+'", "'*'", "'%'", "'&'", "'|'", "'<'", "'<='", "'=='", "'>='", 
		"'>'", "'!='", null, null, null, "'!'", "'='", "'\"'", "'import'", "'i'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "TypeName", 
		"PrintLn", "OpenParen", "CloseParen", "Minus", "ComplexLitteral", "IntegerLiteral", 
		"StringLiteral", "Point", "FloatLitteral", "Plus", "Multiply", "Modulo", 
		"Bitwiseand", "Palochka", "LessThan", "LessOrEqual", "Equals", "GreaterOrEqual", 
		"GreaterThan", "NotEquals", "Id", "Letter", "Digit", "VosklichatelniyZnak", 
		"Prisvaivanie", "Kovicka", "Import", "I", "Whitespace", "NewLine"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Go.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GoParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GoParser.Eof, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 40; statement();
					}
					} 
				}
				State = 45;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 47;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__7) | (1L << PrintLn) | (1L << OpenParen) | (1L << ComplexLitteral) | (1L << IntegerLiteral) | (1L << StringLiteral) | (1L << FloatLitteral) | (1L << Multiply) | (1L << Id) | (1L << VosklichatelniyZnak) | (1L << Import))) != 0)) {
				{
				State = 46; statement();
				}
			}

			State = 49; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintlnStatementContext printlnStatement() {
			return GetRuleContext<PrintlnStatementContext>(0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ShortDeclarationStatementContext shortDeclarationStatement() {
			return GetRuleContext<ShortDeclarationStatementContext>(0);
		}
		public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51; expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; printlnStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 53; typeDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 54; methodDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 55; returnStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 56; shortDeclarationStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 57; importStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(GoParser.StringLiteral, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(Import);
			State = 61; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(GoParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShortDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterShortDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitShortDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShortDeclarationStatementContext shortDeclarationStatement() {
		ShortDeclarationStatementContext _localctx = new ShortDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_shortDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(Id);
			State = 64; Match(T__0);
			State = 65; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(T__1);
			State = 68; expression();
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__2) {
				{
				{
				State = 69; Match(T__2);
				State = 70; expression();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintlnStatementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrintlnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printlnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterPrintlnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitPrintlnStatement(this);
		}
	}

	[RuleVersion(0)]
	public PrintlnStatementContext printlnStatement() {
		PrintlnStatementContext _localctx = new PrintlnStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_printlnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(PrintLn);
			State = 77; Match(OpenParen);
			State = 86;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenParen) | (1L << ComplexLitteral) | (1L << IntegerLiteral) | (1L << StringLiteral) | (1L << FloatLitteral) | (1L << Multiply) | (1L << Id) | (1L << VosklichatelniyZnak))) != 0)) {
				{
				State = 78; expression();
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__2) {
					{
					{
					State = 79; Match(T__2);
					State = 80; expression();
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 88; Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(GoParser.Id, 0); }
		public VarDeclarationContext[] varDeclaration() {
			return GetRuleContexts<VarDeclarationContext>();
		}
		public VarDeclarationContext varDeclaration(int i) {
			return GetRuleContext<VarDeclarationContext>(i);
		}
		public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(T__3);
			State = 91; Match(Id);
			State = 92; Match(T__4);
			State = 93; Match(T__5);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__7 || _la==Id) {
				{
				State = 96;
				switch (TokenStream.La(1)) {
				case Id:
					{
					State = 94; varDeclaration();
					}
					break;
				case T__7:
					{
					State = 95; methodDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 101; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		public ITerminalNode[] Id() { return GetTokens(GoParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(GoParser.Id, i);
		}
		public ITerminalNode TypeName() { return GetToken(GoParser.TypeName, 0); }
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterVarDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitVarDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_varDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(Id);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__2) {
				{
				{
				State = 104; Match(T__2);
				State = 105; Match(Id);
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 111; Match(TypeName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public ITerminalNode[] Id() { return GetTokens(GoParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(GoParser.Id, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] TypeName() { return GetTokens(GoParser.TypeName); }
		public ITerminalNode TypeName(int i) {
			return GetToken(GoParser.TypeName, i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_methodDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(T__7);
			State = 128;
			_la = TokenStream.La(1);
			if (_la==OpenParen) {
				{
				State = 114; Match(OpenParen);
				State = 125;
				_la = TokenStream.La(1);
				if (_la==Id) {
					{
					State = 115; Match(Id);
					State = 116; Match(TypeName);
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==T__2) {
						{
						{
						State = 117; Match(T__2);
						State = 118; Match(Id);
						State = 119; Match(TypeName);
						}
						}
						State = 124;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
				}

				State = 127; Match(CloseParen);
				}
			}

			State = 130; Match(Id);
			State = 131; Match(OpenParen);
			State = 132; Match(CloseParen);
			State = 133; Match(T__5);
			State = 137;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 134; statement();
					}
					} 
				}
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 141;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__7) | (1L << PrintLn) | (1L << OpenParen) | (1L << ComplexLitteral) | (1L << IntegerLiteral) | (1L << StringLiteral) | (1L << FloatLitteral) | (1L << Multiply) | (1L << Id) | (1L << VosklichatelniyZnak) | (1L << Import))) != 0)) {
				{
				State = 140; statement();
				}
			}

			State = 143; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(GoParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ComplexLitteral() { return GetToken(GoParser.ComplexLitteral, 0); }
		public ITerminalNode IntegerLiteral() { return GetToken(GoParser.IntegerLiteral, 0); }
		public ITerminalNode FloatLitteral() { return GetToken(GoParser.FloatLitteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(GoParser.StringLiteral, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ObjectConstuctorContext objectConstuctor() {
			return GetRuleContext<ObjectConstuctorContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_primaryExpression);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; Match(Id);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146; Match(OpenParen);
				State = 147; expression();
				State = 148; Match(CloseParen);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150; Match(ComplexLitteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 151; Match(IntegerLiteral);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 152; Match(FloatLitteral);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 153; Match(StringLiteral);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 154; functionCall();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 155; objectConstuctor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(GoParser.Id, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public KeyWordParametrContext[] keyWordParametr() {
			return GetRuleContexts<KeyWordParametrContext>();
		}
		public KeyWordParametrContext keyWordParametr(int i) {
			return GetRuleContext<KeyWordParametrContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(Id);
			State = 159; Match(OpenParen);
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 160; expression();
				}
				break;
			case 2:
				{
				State = 161; keyWordParametr();
				}
				break;
			}
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__2) {
				{
				{
				State = 164; Match(T__2);
				State = 167;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 165; expression();
					}
					break;
				case 2:
					{
					State = 166; keyWordParametr();
					}
					break;
				}
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 174; Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectConstuctorContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(GoParser.Id, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public KeyWordParametrContext[] keyWordParametr() {
			return GetRuleContexts<KeyWordParametrContext>();
		}
		public KeyWordParametrContext keyWordParametr(int i) {
			return GetRuleContext<KeyWordParametrContext>(i);
		}
		public ObjectConstuctorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectConstuctor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterObjectConstuctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitObjectConstuctor(this);
		}
	}

	[RuleVersion(0)]
	public ObjectConstuctorContext objectConstuctor() {
		ObjectConstuctorContext _localctx = new ObjectConstuctorContext(Context, State);
		EnterRule(_localctx, 22, RULE_objectConstuctor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(Id);
			State = 177; Match(T__5);
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 178; expression();
				}
				break;
			case 2:
				{
				State = 179; keyWordParametr();
				}
				break;
			}
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__2) {
				{
				{
				State = 182; Match(T__2);
				State = 185;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 183; expression();
					}
					break;
				case 2:
					{
					State = 184; keyWordParametr();
					}
					break;
				}
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 192; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyWordParametrContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(GoParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KeyWordParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyWordParametr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterKeyWordParametr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitKeyWordParametr(this);
		}
	}

	[RuleVersion(0)]
	public KeyWordParametrContext keyWordParametr() {
		KeyWordParametrContext _localctx = new KeyWordParametrContext(Context, State);
		EnterRule(_localctx, 24, RULE_keyWordParametr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(Id);
			State = 195; Match(T__8);
			State = 196; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureMemberExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public StructureMemberExpressionContext structureMemberExpression() {
			return GetRuleContext<StructureMemberExpressionContext>(0);
		}
		public StructureMemberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureMemberExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterStructureMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitStructureMemberExpression(this);
		}
	}

	[RuleVersion(0)]
	public StructureMemberExpressionContext structureMemberExpression() {
		return structureMemberExpression(0);
	}

	private StructureMemberExpressionContext structureMemberExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StructureMemberExpressionContext _localctx = new StructureMemberExpressionContext(Context, _parentState);
		StructureMemberExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_structureMemberExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 199; primaryExpression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 206;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StructureMemberExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_structureMemberExpression);
					State = 201;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 202; Match(Point);
					State = 203; primaryExpression();
					}
					} 
				}
				State = 208;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public StructureMemberExpressionContext structureMemberExpression() {
			return GetRuleContext<StructureMemberExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_unaryExpression);
		try {
			State = 214;
			switch (TokenStream.La(1)) {
			case OpenParen:
			case ComplexLitteral:
			case IntegerLiteral:
			case StringLiteral:
			case FloatLitteral:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; structureMemberExpression(0);
				}
				break;
			case VosklichatelniyZnak:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210; Match(VosklichatelniyZnak);
				State = 211; structureMemberExpression(0);
				}
				break;
			case Multiply:
				EnterOuterAlt(_localctx, 3);
				{
				State = 212; Match(Multiply);
				State = 213; structureMemberExpression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 217; unaryExpression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 230;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 228;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 219;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 220; Match(Multiply);
						State = 221; unaryExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 222;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 223; Match(Modulo);
						State = 224; unaryExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 225;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 226; Match(Bitwiseand);
						State = 227; unaryExpression();
						}
						break;
					}
					} 
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 234; multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 244;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 242;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 236;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 237; Match(Minus);
						State = 238; multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 239;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 240; Match(Palochka);
						State = 241; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 246;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		public ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonExpressionContext comparisonExpression() {
		return comparisonExpression(0);
	}

	private ComparisonExpressionContext comparisonExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ComparisonExpressionContext _localctx = new ComparisonExpressionContext(Context, _parentState);
		ComparisonExpressionContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_comparisonExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 248; additiveExpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 270;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 268;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 250;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 251; Match(LessThan);
						State = 252; additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 253;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 254; Match(LessOrEqual);
						State = 255; additiveExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 256;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 257; Match(Equals);
						State = 258; additiveExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 259;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 260; Match(GreaterOrEqual);
						State = 261; additiveExpression(0);
						}
						break;
					case 5:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 262;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 263; Match(GreaterThan);
						State = 264; additiveExpression(0);
						}
						break;
					case 6:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 265;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 266; Match(NotEquals);
						State = 267; additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssighmentExpressionContext : ParserRuleContext {
		public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		public AssighmentExpressionContext assighmentExpression() {
			return GetRuleContext<AssighmentExpressionContext>(0);
		}
		public AssighmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assighmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterAssighmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitAssighmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssighmentExpressionContext assighmentExpression() {
		AssighmentExpressionContext _localctx = new AssighmentExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_assighmentExpression);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273; comparisonExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274; comparisonExpression(0);
				State = 275; Match(Prisvaivanie);
				State = 276; assighmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssighmentExpressionContext assighmentExpression() {
			return GetRuleContext<AssighmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoListener typedListener = listener as IGoListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; assighmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return structureMemberExpression_sempred((StructureMemberExpressionContext)_localctx, predIndex);
		case 15: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 16: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 17: return comparisonExpression_sempred((ComparisonExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool structureMemberExpression_sempred(StructureMemberExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool comparisonExpression_sempred(ComparisonExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3*\x11D");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4");
		sb.Append("\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4");
		sb.Append("\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x3\x2\a\x2,\n\x2\f\x2\xE");
		sb.Append("\x2/\v\x2\x3\x2\x5\x2\x32\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3=\n\x3\x3\x4\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6J\n\x6\f\x6\xE");
		sb.Append("\x6M\v\x6\x3\a\x3\a\x3\a\x3\a\x3\a\a\aT\n\a\f\a\xE\aW\v\a\x5");
		sb.Append("\aY\n\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\b\x63\n\b");
		sb.Append("\f\b\xE\b\x66\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\a\tm\n\t\f\t\xE\t");
		sb.Append("p\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n{\n\n");
		sb.Append("\f\n\xE\n~\v\n\x5\n\x80\n\n\x3\n\x5\n\x83\n\n\x3\n\x3\n\x3\n");
		sb.Append("\x3\n\x3\n\a\n\x8A\n\n\f\n\xE\n\x8D\v\n\x3\n\x5\n\x90\n\n\x3");
		sb.Append("\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x5\v\x9F\n\v\x3\f\x3\f\x3\f\x3\f\x5\f\xA5\n\f\x3\f\x3\f\x3");
		sb.Append("\f\x5\f\xAA\n\f\a\f\xAC\n\f\f\f\xE\f\xAF\v\f\x3\f\x3\f\x3\r");
		sb.Append("\x3\r\x3\r\x3\r\x5\r\xB7\n\r\x3\r\x3\r\x3\r\x5\r\xBC\n\r\a\r");
		sb.Append("\xBE\n\r\f\r\xE\r\xC1\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\xCF\n\xF\f\xF\xE\xF");
		sb.Append("\xD2\v\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xD9\n\x10");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3");
		sb.Append("\x11\x3\x11\x3\x11\x3\x11\a\x11\xE7\n\x11\f\x11\xE\x11\xEA\v");
		sb.Append("\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12");
		sb.Append("\x3\x12\a\x12\xF5\n\x12\f\x12\xE\x12\xF8\v\x12\x3\x13\x3\x13");
		sb.Append("\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3");
		sb.Append("\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13");
		sb.Append("\x3\x13\x3\x13\a\x13\x10F\n\x13\f\x13\xE\x13\x112\v\x13\x3\x14");
		sb.Append("\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x119\n\x14\x3\x15\x3\x15");
		sb.Append("\x3\x15\x2\x6\x1C \"$\x16\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16");
		sb.Append("\x18\x1A\x1C\x1E \"$&(\x2\x2\x137\x2-\x3\x2\x2\x2\x4<\x3\x2");
		sb.Append("\x2\x2\x6>\x3\x2\x2\x2\b\x41\x3\x2\x2\x2\n\x45\x3\x2\x2\x2\f");
		sb.Append("N\x3\x2\x2\x2\xE\\\x3\x2\x2\x2\x10i\x3\x2\x2\x2\x12s\x3\x2\x2");
		sb.Append("\x2\x14\x9E\x3\x2\x2\x2\x16\xA0\x3\x2\x2\x2\x18\xB2\x3\x2\x2");
		sb.Append("\x2\x1A\xC4\x3\x2\x2\x2\x1C\xC8\x3\x2\x2\x2\x1E\xD8\x3\x2\x2");
		sb.Append("\x2 \xDA\x3\x2\x2\x2\"\xEB\x3\x2\x2\x2$\xF9\x3\x2\x2\x2&\x118");
		sb.Append("\x3\x2\x2\x2(\x11A\x3\x2\x2\x2*,\x5\x4\x3\x2+*\x3\x2\x2\x2,");
		sb.Append("/\x3\x2\x2\x2-+\x3\x2\x2\x2-.\x3\x2\x2\x2.\x31\x3\x2\x2\x2/");
		sb.Append("-\x3\x2\x2\x2\x30\x32\x5\x4\x3\x2\x31\x30\x3\x2\x2\x2\x31\x32");
		sb.Append("\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x34\a\x2\x2\x3\x34\x3\x3");
		sb.Append("\x2\x2\x2\x35=\x5(\x15\x2\x36=\x5\f\a\x2\x37=\x5\xE\b\x2\x38");
		sb.Append("=\x5\x12\n\x2\x39=\x5\n\x6\x2:=\x5\b\x5\x2;=\x5\x6\x4\x2<\x35");
		sb.Append("\x3\x2\x2\x2<\x36\x3\x2\x2\x2<\x37\x3\x2\x2\x2<\x38\x3\x2\x2");
		sb.Append("\x2<\x39\x3\x2\x2\x2<:\x3\x2\x2\x2<;\x3\x2\x2\x2=\x5\x3\x2\x2");
		sb.Append("\x2>?\a\'\x2\x2?@\a\x13\x2\x2@\a\x3\x2\x2\x2\x41\x42\a!\x2\x2");
		sb.Append("\x42\x43\a\x3\x2\x2\x43\x44\x5(\x15\x2\x44\t\x3\x2\x2\x2\x45");
		sb.Append("\x46\a\x4\x2\x2\x46K\x5(\x15\x2GH\a\x5\x2\x2HJ\x5(\x15\x2IG");
		sb.Append("\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2L\v\x3");
		sb.Append("\x2\x2\x2MK\x3\x2\x2\x2NO\a\r\x2\x2OX\a\xE\x2\x2PU\x5(\x15\x2");
		sb.Append("QR\a\x5\x2\x2RT\x5(\x15\x2SQ\x3\x2\x2\x2TW\x3\x2\x2\x2US\x3");
		sb.Append("\x2\x2\x2UV\x3\x2\x2\x2VY\x3\x2\x2\x2WU\x3\x2\x2\x2XP\x3\x2");
		sb.Append("\x2\x2XY\x3\x2\x2\x2YZ\x3\x2\x2\x2Z[\a\xF\x2\x2[\r\x3\x2\x2");
		sb.Append("\x2\\]\a\x6\x2\x2]^\a!\x2\x2^_\a\a\x2\x2_\x64\a\b\x2\x2`\x63");
		sb.Append("\x5\x10\t\x2\x61\x63\x5\x12\n\x2\x62`\x3\x2\x2\x2\x62\x61\x3");
		sb.Append("\x2\x2\x2\x63\x66\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x65\x3");
		sb.Append("\x2\x2\x2\x65g\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2gh\a\t\x2\x2h");
		sb.Append("\xF\x3\x2\x2\x2in\a!\x2\x2jk\a\x5\x2\x2km\a!\x2\x2lj\x3\x2\x2");
		sb.Append("\x2mp\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2oq\x3\x2\x2\x2");
		sb.Append("pn\x3\x2\x2\x2qr\a\f\x2\x2r\x11\x3\x2\x2\x2s\x82\a\n\x2\x2t");
		sb.Append("\x7F\a\xE\x2\x2uv\a!\x2\x2v|\a\f\x2\x2wx\a\x5\x2\x2xy\a!\x2");
		sb.Append("\x2y{\a\f\x2\x2zw\x3\x2\x2\x2{~\x3\x2\x2\x2|z\x3\x2\x2\x2|}");
		sb.Append("\x3\x2\x2\x2}\x80\x3\x2\x2\x2~|\x3\x2\x2\x2\x7Fu\x3\x2\x2\x2");
		sb.Append("\x7F\x80\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x83\a\xF\x2\x2");
		sb.Append("\x82t\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84");
		sb.Append("\x85\a!\x2\x2\x85\x86\a\xE\x2\x2\x86\x87\a\xF\x2\x2\x87\x8B");
		sb.Append("\a\b\x2\x2\x88\x8A\x5\x4\x3\x2\x89\x88\x3\x2\x2\x2\x8A\x8D\x3");
		sb.Append("\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8F\x3");
		sb.Append("\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8E\x90\x5\x4\x3\x2\x8F\x8E\x3");
		sb.Append("\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x92\a");
		sb.Append("\t\x2\x2\x92\x13\x3\x2\x2\x2\x93\x9F\a!\x2\x2\x94\x95\a\xE\x2");
		sb.Append("\x2\x95\x96\x5(\x15\x2\x96\x97\a\xF\x2\x2\x97\x9F\x3\x2\x2\x2");
		sb.Append("\x98\x9F\a\x11\x2\x2\x99\x9F\a\x12\x2\x2\x9A\x9F\a\x15\x2\x2");
		sb.Append("\x9B\x9F\a\x13\x2\x2\x9C\x9F\x5\x16\f\x2\x9D\x9F\x5\x18\r\x2");
		sb.Append("\x9E\x93\x3\x2\x2\x2\x9E\x94\x3\x2\x2\x2\x9E\x98\x3\x2\x2\x2");
		sb.Append("\x9E\x99\x3\x2\x2\x2\x9E\x9A\x3\x2\x2\x2\x9E\x9B\x3\x2\x2\x2");
		sb.Append("\x9E\x9C\x3\x2\x2\x2\x9E\x9D\x3\x2\x2\x2\x9F\x15\x3\x2\x2\x2");
		sb.Append("\xA0\xA1\a!\x2\x2\xA1\xA4\a\xE\x2\x2\xA2\xA5\x5(\x15\x2\xA3");
		sb.Append("\xA5\x5\x1A\xE\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA3\x3\x2\x2\x2\xA5");
		sb.Append("\xAD\x3\x2\x2\x2\xA6\xA9\a\x5\x2\x2\xA7\xAA\x5(\x15\x2\xA8\xAA");
		sb.Append("\x5\x1A\xE\x2\xA9\xA7\x3\x2\x2\x2\xA9\xA8\x3\x2\x2\x2\xAA\xAC");
		sb.Append("\x3\x2\x2\x2\xAB\xA6\x3\x2\x2\x2\xAC\xAF\x3\x2\x2\x2\xAD\xAB");
		sb.Append("\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xB0\x3\x2\x2\x2\xAF\xAD");
		sb.Append("\x3\x2\x2\x2\xB0\xB1\a\xF\x2\x2\xB1\x17\x3\x2\x2\x2\xB2\xB3");
		sb.Append("\a!\x2\x2\xB3\xB6\a\b\x2\x2\xB4\xB7\x5(\x15\x2\xB5\xB7\x5\x1A");
		sb.Append("\xE\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB5\x3\x2\x2\x2\xB7\xBF\x3\x2");
		sb.Append("\x2\x2\xB8\xBB\a\x5\x2\x2\xB9\xBC\x5(\x15\x2\xBA\xBC\x5\x1A");
		sb.Append("\xE\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBA\x3\x2\x2\x2\xBC\xBE\x3\x2");
		sb.Append("\x2\x2\xBD\xB8\x3\x2\x2\x2\xBE\xC1\x3\x2\x2\x2\xBF\xBD\x3\x2");
		sb.Append("\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC2\x3\x2\x2\x2\xC1\xBF\x3\x2");
		sb.Append("\x2\x2\xC2\xC3\a\t\x2\x2\xC3\x19\x3\x2\x2\x2\xC4\xC5\a!\x2\x2");
		sb.Append("\xC5\xC6\a\v\x2\x2\xC6\xC7\x5(\x15\x2\xC7\x1B\x3\x2\x2\x2\xC8");
		sb.Append("\xC9\b\xF\x1\x2\xC9\xCA\x5\x14\v\x2\xCA\xD0\x3\x2\x2\x2\xCB");
		sb.Append("\xCC\f\x4\x2\x2\xCC\xCD\a\x14\x2\x2\xCD\xCF\x5\x14\v\x2\xCE");
		sb.Append("\xCB\x3\x2\x2\x2\xCF\xD2\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD0");
		sb.Append("\xD1\x3\x2\x2\x2\xD1\x1D\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD3");
		sb.Append("\xD9\x5\x1C\xF\x2\xD4\xD5\a$\x2\x2\xD5\xD9\x5\x1C\xF\x2\xD6");
		sb.Append("\xD7\a\x17\x2\x2\xD7\xD9\x5\x1C\xF\x2\xD8\xD3\x3\x2\x2\x2\xD8");
		sb.Append("\xD4\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD9\x1F\x3\x2\x2\x2\xDA");
		sb.Append("\xDB\b\x11\x1\x2\xDB\xDC\x5\x1E\x10\x2\xDC\xE8\x3\x2\x2\x2\xDD");
		sb.Append("\xDE\f\x5\x2\x2\xDE\xDF\a\x17\x2\x2\xDF\xE7\x5\x1E\x10\x2\xE0");
		sb.Append("\xE1\f\x4\x2\x2\xE1\xE2\a\x18\x2\x2\xE2\xE7\x5\x1E\x10\x2\xE3");
		sb.Append("\xE4\f\x3\x2\x2\xE4\xE5\a\x19\x2\x2\xE5\xE7\x5\x1E\x10\x2\xE6");
		sb.Append("\xDD\x3\x2\x2\x2\xE6\xE0\x3\x2\x2\x2\xE6\xE3\x3\x2\x2\x2\xE7");
		sb.Append("\xEA\x3\x2\x2\x2\xE8\xE6\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9");
		sb.Append("!\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEB\xEC\b\x12\x1\x2\xEC\xED");
		sb.Append("\x5 \x11\x2\xED\xF6\x3\x2\x2\x2\xEE\xEF\f\x4\x2\x2\xEF\xF0\a");
		sb.Append("\x10\x2\x2\xF0\xF5\x5 \x11\x2\xF1\xF2\f\x3\x2\x2\xF2\xF3\a\x1A");
		sb.Append("\x2\x2\xF3\xF5\x5 \x11\x2\xF4\xEE\x3\x2\x2\x2\xF4\xF1\x3\x2");
		sb.Append("\x2\x2\xF5\xF8\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF6\xF7\x3\x2");
		sb.Append("\x2\x2\xF7#\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF9\xFA\b\x13\x1");
		sb.Append("\x2\xFA\xFB\x5\"\x12\x2\xFB\x110\x3\x2\x2\x2\xFC\xFD\f\b\x2");
		sb.Append("\x2\xFD\xFE\a\x1B\x2\x2\xFE\x10F\x5\"\x12\x2\xFF\x100\f\a\x2");
		sb.Append("\x2\x100\x101\a\x1C\x2\x2\x101\x10F\x5\"\x12\x2\x102\x103\f");
		sb.Append("\x6\x2\x2\x103\x104\a\x1D\x2\x2\x104\x10F\x5\"\x12\x2\x105\x106");
		sb.Append("\f\x5\x2\x2\x106\x107\a\x1E\x2\x2\x107\x10F\x5\"\x12\x2\x108");
		sb.Append("\x109\f\x4\x2\x2\x109\x10A\a\x1F\x2\x2\x10A\x10F\x5\"\x12\x2");
		sb.Append("\x10B\x10C\f\x3\x2\x2\x10C\x10D\a \x2\x2\x10D\x10F\x5\"\x12");
		sb.Append("\x2\x10E\xFC\x3\x2\x2\x2\x10E\xFF\x3\x2\x2\x2\x10E\x102\x3\x2");
		sb.Append("\x2\x2\x10E\x105\x3\x2\x2\x2\x10E\x108\x3\x2\x2\x2\x10E\x10B");
		sb.Append("\x3\x2\x2\x2\x10F\x112\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x110");
		sb.Append("\x111\x3\x2\x2\x2\x111%\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x113");
		sb.Append("\x119\x5$\x13\x2\x114\x115\x5$\x13\x2\x115\x116\a%\x2\x2\x116");
		sb.Append("\x117\x5&\x14\x2\x117\x119\x3\x2\x2\x2\x118\x113\x3\x2\x2\x2");
		sb.Append("\x118\x114\x3\x2\x2\x2\x119\'\x3\x2\x2\x2\x11A\x11B\x5&\x14");
		sb.Append("\x2\x11B)\x3\x2\x2\x2 -\x31<KUX\x62\x64n|\x7F\x82\x8B\x8F\x9E");
		sb.Append("\xA4\xA9\xAD\xB6\xBB\xBF\xD0\xD8\xE6\xE8\xF4\xF6\x10E\x110\x118");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
